//This code was auto-generated by SceneBundleGenerator.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using UnityEditor.SceneManagement;

public class GeneratedSceneBundles
{
  [MenuItem("Scene/Tools_Showcase/All Scenes/Load Scenes")]
  static public void LoadScenes1()
  {
      SceneBundleScriptObj sceneBundle = AssetDatabase.LoadAssetAtPath<SceneBundleScriptObj>("Assets/Scenes/SceneBundles/All Scenes.asset");
      if(sceneBundle == null)
      {
          SceneBundleGenerator.GenerateSceneBundle();
      }
      else
      {
          OpenScenes(sceneBundle);
      }
  }

  [MenuItem("Scene/Tools_Showcase/All Scenes/Load Build Settings")]
  static public void LoadEditorBuildSettings1()
  {
      SceneBundleScriptObj sceneBundle = AssetDatabase.LoadAssetAtPath<SceneBundleScriptObj>("Assets/Scenes/SceneBundles/All Scenes.asset");
      if(sceneBundle == null)
      {
          SceneBundleGenerator.GenerateSceneBundle();
      }
      else
      {
          LoadBuildSettings(sceneBundle);
      }
  }

  [MenuItem("Scene/Tools_Showcase/B and C/Load Scenes")]
  static public void LoadScenes2()
  {
      SceneBundleScriptObj sceneBundle = AssetDatabase.LoadAssetAtPath<SceneBundleScriptObj>("Assets/Scenes/SceneBundles/B and C.asset");
      if(sceneBundle == null)
      {
          SceneBundleGenerator.GenerateSceneBundle();
      }
      else
      {
          OpenScenes(sceneBundle);
      }
  }

  [MenuItem("Scene/Tools_Showcase/B and C/Load Build Settings")]
  static public void LoadEditorBuildSettings2()
  {
      SceneBundleScriptObj sceneBundle = AssetDatabase.LoadAssetAtPath<SceneBundleScriptObj>("Assets/Scenes/SceneBundles/B and C.asset");
      if(sceneBundle == null)
      {
          SceneBundleGenerator.GenerateSceneBundle();
      }
      else
      {
          LoadBuildSettings(sceneBundle);
      }
  }

  static private void OpenScenes(SceneBundleScriptObj sceneBundle)
  {
      for(int i = 0; i < sceneBundle.scenes.Count; i++)
      {
          if(i == 0)
              EditorSceneManager.OpenScene(sceneBundle.scenes[i].scenePath, OpenSceneMode.Single);

          else
              EditorSceneManager.OpenScene(sceneBundle.scenes[i].scenePath, OpenSceneMode.Additive);
      }
  }

  static private void LoadBuildSettings(SceneBundleScriptObj sceneBundle)
  {
      List<EditorBuildSettingsScene> sceneSettings = new List<EditorBuildSettingsScene>();
      for(int i = 0; i < sceneBundle.scenes.Count; i++)
      {
          EditorBuildSettingsScene newSceneSetting = new EditorBuildSettingsScene(sceneBundle.scenes[i].scenePath, sceneBundle.scenes[i].isSceneEnabled);
          sceneSettings.Add(newSceneSetting);
      }
      EditorBuildSettings.scenes = sceneSettings.ToArray();
  }
}
