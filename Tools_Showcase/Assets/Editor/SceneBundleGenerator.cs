using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Text;
using System.IO;

public class SceneBundleGenerator
{
    /// <summary>
    /// File Path to the scene bundles
    /// </summary>
    private const string ASSETS_FILE_PATH = "/Scenes/SceneBundles";

    /// <summary>
    /// Generate the script that will create the menu items responsible for loading scenes or build settings
    /// </summary>
    public static void GenerateSceneBundle()
    {
        string scriptPath = Application.dataPath + "/Editor/GeneratedSceneBundles.cs";

        //Start writing the class that will create the menu items
        StringBuilder generatedCode = new StringBuilder();
        generatedCode.AppendLine("//This code was auto-generated by SceneBundleGenerator.cs");
        generatedCode.AppendLine("");
        generatedCode.AppendLine("using System.Collections;");
        generatedCode.AppendLine("using System.Collections.Generic;");
        generatedCode.AppendLine("using UnityEngine;");
        generatedCode.AppendLine("using UnityEditor;");
        generatedCode.AppendLine("using UnityEditor.SceneManagement;");
        generatedCode.AppendLine("");
        generatedCode.AppendLine("public class GeneratedSceneBundles");
        generatedCode.AppendLine("{");

        //Grab all the Scene Bundle Asset files fro, the folder
        DirectoryInfo directory = new DirectoryInfo(Application.dataPath + ASSETS_FILE_PATH);
        FileInfo[] files = directory.GetFiles("*.asset");

        //Go through each Scene Bundle Asset and write the menu item functions that will trigger loading the scenes or loading the build settings.
        //The function will grab the data from the asset file and pass it to OpenScene or LoadBuildSettings, depending on which menu item the user clicks.
        int i = 0;
        foreach (FileInfo file in files)
        {
            i++;
            SceneBundleScriptObj sceneBundle = AssetDatabase.LoadAssetAtPath<SceneBundleScriptObj>("Assets" + ASSETS_FILE_PATH + "/" + file.Name);

            generatedCode.AppendLine("  [MenuItem(\"Scene/" + sceneBundle.projectName + "/" + sceneBundle.assetName + "/Load Scenes\")]");
            generatedCode.AppendLine("  static public void LoadScenes" + i.ToString() + "()");
            generatedCode.AppendLine("  {");
            generatedCode.AppendLine("      SceneBundleScriptObj sceneBundle = AssetDatabase.LoadAssetAtPath<SceneBundleScriptObj>(\"Assets/Scenes/SceneBundles/" +  file.Name + "\");");
            generatedCode.AppendLine("      if(sceneBundle == null)");
            generatedCode.AppendLine("      {");
            generatedCode.AppendLine("          SceneBundleGenerator.GenerateSceneBundle();");
            generatedCode.AppendLine("      }");
            generatedCode.AppendLine("      else");
            generatedCode.AppendLine("      {");
            generatedCode.AppendLine("          OpenScenes(sceneBundle);");
            generatedCode.AppendLine("      }");
            generatedCode.AppendLine("  }");
            generatedCode.AppendLine("");
            generatedCode.AppendLine("  [MenuItem(\"Scene/" + sceneBundle.projectName + "/" + sceneBundle.assetName + "/Load Build Settings\")]"); ;
            generatedCode.AppendLine("  static public void LoadEditorBuildSettings" + i.ToString() + "()");
            generatedCode.AppendLine("  {");
            generatedCode.AppendLine("      SceneBundleScriptObj sceneBundle = AssetDatabase.LoadAssetAtPath<SceneBundleScriptObj>(\"Assets/Scenes/SceneBundles/" + file.Name + "\");");
            generatedCode.AppendLine("      if(sceneBundle == null)");
            generatedCode.AppendLine("      {");
            generatedCode.AppendLine("          SceneBundleGenerator.GenerateSceneBundle();");
            generatedCode.AppendLine("      }");
            generatedCode.AppendLine("      else");
            generatedCode.AppendLine("      {");
            generatedCode.AppendLine("          LoadBuildSettings(sceneBundle);");
            generatedCode.AppendLine("      }");
            generatedCode.AppendLine("  }");
            generatedCode.AppendLine("");
        }

        //Write the function for OpenScene which will hanlde loading all the scenes from the scene bundle passed by the menu item function
        generatedCode.AppendLine("  static private void OpenScenes(SceneBundleScriptObj sceneBundle)");
        generatedCode.AppendLine("  {");
        generatedCode.AppendLine("      for(int i = 0; i < sceneBundle.scenes.Count; i++)");
        generatedCode.AppendLine("      {");
        generatedCode.AppendLine("          if(i == 0)");
        generatedCode.AppendLine("              EditorSceneManager.OpenScene(sceneBundle.scenes[i].scenePath, OpenSceneMode.Single);");
        generatedCode.AppendLine("");
        generatedCode.AppendLine("          else");
        generatedCode.AppendLine("              EditorSceneManager.OpenScene(sceneBundle.scenes[i].scenePath, OpenSceneMode.Additive);");
        generatedCode.AppendLine("      }");
        generatedCode.AppendLine("  }");
        generatedCode.AppendLine("");

        //Write the function for LoadBuildSettings which will handle loading all the enabled scenes to the build settings from the scene bundle passed by the menu item function
        generatedCode.AppendLine("  static private void LoadBuildSettings(SceneBundleScriptObj sceneBundle)");
        generatedCode.AppendLine("  {");
        generatedCode.AppendLine("      List<EditorBuildSettingsScene> sceneSettings = new List<EditorBuildSettingsScene>();");
        generatedCode.AppendLine("      for(int i = 0; i < sceneBundle.scenes.Count; i++)");
        generatedCode.AppendLine("      {");
        generatedCode.AppendLine("          EditorBuildSettingsScene newSceneSetting = new EditorBuildSettingsScene(sceneBundle.scenes[i].scenePath, sceneBundle.scenes[i].isSceneEnabled);");
        generatedCode.AppendLine("          sceneSettings.Add(newSceneSetting);");
        generatedCode.AppendLine("      }");
        generatedCode.AppendLine("      EditorBuildSettings.scenes = sceneSettings.ToArray();");
        generatedCode.AppendLine("  }");
        generatedCode.AppendLine("}");

        //Delete old version of the generated script and add this newly updated generated script
        File.Delete(scriptPath);
        File.WriteAllText(scriptPath, generatedCode.ToString(), Encoding.UTF8);
        AssetDatabase.ImportAsset("Assets/Editor/GeneratedSceneBundles.cs");
    }
}
